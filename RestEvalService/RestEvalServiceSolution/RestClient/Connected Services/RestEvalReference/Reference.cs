//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RestClient.RestEvalReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Eval", Namespace="http://schemas.datacontract.org/2004/07/RestServiceLibrary.Models")]
    [System.SerializableAttribute()]
    public partial class Eval : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubmitterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeSentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Submitter {
            get {
                return this.SubmitterField;
            }
            set {
                if ((object.ReferenceEquals(this.SubmitterField, value) != true)) {
                    this.SubmitterField = value;
                    this.RaisePropertyChanged("Submitter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeSent {
            get {
                return this.TimeSentField;
            }
            set {
                if ((this.TimeSentField.Equals(value) != true)) {
                    this.TimeSentField = value;
                    this.RaisePropertyChanged("TimeSent");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RestEvalReference.IEval")]
    public interface IEval {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/GetEval", ReplyAction="http://tempuri.org/IEval/GetEvalResponse")]
        RestClient.RestEvalReference.Eval[] GetEval();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/GetEval", ReplyAction="http://tempuri.org/IEval/GetEvalResponse")]
        System.Threading.Tasks.Task<RestClient.RestEvalReference.Eval[]> GetEvalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/GetEvalById", ReplyAction="http://tempuri.org/IEval/GetEvalByIdResponse")]
        RestClient.RestEvalReference.Eval GetEvalById(string Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/GetEvalById", ReplyAction="http://tempuri.org/IEval/GetEvalByIdResponse")]
        System.Threading.Tasks.Task<RestClient.RestEvalReference.Eval> GetEvalByIdAsync(string Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/GetEvalsBySubmitter", ReplyAction="http://tempuri.org/IEval/GetEvalsBySubmitterResponse")]
        RestClient.RestEvalReference.Eval[] GetEvalsBySubmitter(string submitter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/GetEvalsBySubmitter", ReplyAction="http://tempuri.org/IEval/GetEvalsBySubmitterResponse")]
        System.Threading.Tasks.Task<RestClient.RestEvalReference.Eval[]> GetEvalsBySubmitterAsync(string submitter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/GetAllEvals", ReplyAction="http://tempuri.org/IEval/GetAllEvalsResponse")]
        RestClient.RestEvalReference.Eval[] GetAllEvals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/GetAllEvals", ReplyAction="http://tempuri.org/IEval/GetAllEvalsResponse")]
        System.Threading.Tasks.Task<RestClient.RestEvalReference.Eval[]> GetAllEvalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/SubmitEval", ReplyAction="http://tempuri.org/IEval/SubmitEvalResponse")]
        void SubmitEval(RestClient.RestEvalReference.Eval eval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/SubmitEval", ReplyAction="http://tempuri.org/IEval/SubmitEvalResponse")]
        System.Threading.Tasks.Task SubmitEvalAsync(RestClient.RestEvalReference.Eval eval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/RemoveEval", ReplyAction="http://tempuri.org/IEval/RemoveEvalResponse")]
        void RemoveEval(string Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEval/RemoveEval", ReplyAction="http://tempuri.org/IEval/RemoveEvalResponse")]
        System.Threading.Tasks.Task RemoveEvalAsync(string Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEvalChannel : RestClient.RestEvalReference.IEval, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EvalClient : System.ServiceModel.ClientBase<RestClient.RestEvalReference.IEval>, RestClient.RestEvalReference.IEval {
        
        public EvalClient() {
        }
        
        public EvalClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EvalClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvalClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvalClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RestClient.RestEvalReference.Eval[] GetEval() {
            return base.Channel.GetEval();
        }
        
        public System.Threading.Tasks.Task<RestClient.RestEvalReference.Eval[]> GetEvalAsync() {
            return base.Channel.GetEvalAsync();
        }
        
        public RestClient.RestEvalReference.Eval GetEvalById(string Id) {
            return base.Channel.GetEvalById(Id);
        }
        
        public System.Threading.Tasks.Task<RestClient.RestEvalReference.Eval> GetEvalByIdAsync(string Id) {
            return base.Channel.GetEvalByIdAsync(Id);
        }
        
        public RestClient.RestEvalReference.Eval[] GetEvalsBySubmitter(string submitter) {
            return base.Channel.GetEvalsBySubmitter(submitter);
        }
        
        public System.Threading.Tasks.Task<RestClient.RestEvalReference.Eval[]> GetEvalsBySubmitterAsync(string submitter) {
            return base.Channel.GetEvalsBySubmitterAsync(submitter);
        }
        
        public RestClient.RestEvalReference.Eval[] GetAllEvals() {
            return base.Channel.GetAllEvals();
        }
        
        public System.Threading.Tasks.Task<RestClient.RestEvalReference.Eval[]> GetAllEvalsAsync() {
            return base.Channel.GetAllEvalsAsync();
        }
        
        public void SubmitEval(RestClient.RestEvalReference.Eval eval) {
            base.Channel.SubmitEval(eval);
        }
        
        public System.Threading.Tasks.Task SubmitEvalAsync(RestClient.RestEvalReference.Eval eval) {
            return base.Channel.SubmitEvalAsync(eval);
        }
        
        public void RemoveEval(string Id) {
            base.Channel.RemoveEval(Id);
        }
        
        public System.Threading.Tasks.Task RemoveEvalAsync(string Id) {
            return base.Channel.RemoveEvalAsync(Id);
        }
    }
}
